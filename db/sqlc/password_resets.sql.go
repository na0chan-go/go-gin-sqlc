// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: password_resets.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createPasswordReset = `-- name: CreatePasswordReset :execresult
INSERT INTO password_resets (
    user_id, token, expires_at
) VALUES (
    ?, ?, ?
)
`

type CreatePasswordResetParams struct {
	UserID    int64     `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreatePasswordReset(ctx context.Context, arg CreatePasswordResetParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPasswordReset, arg.UserID, arg.Token, arg.ExpiresAt)
}

const deletePasswordReset = `-- name: DeletePasswordReset :exec
DELETE FROM password_resets
WHERE token = ?
`

func (q *Queries) DeletePasswordReset(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deletePasswordReset, token)
	return err
}

const getPasswordResetByToken = `-- name: GetPasswordResetByToken :one
SELECT user_id, token, expires_at, created_at
FROM password_resets
WHERE token = ? AND expires_at > NOW()
LIMIT 1
`

type GetPasswordResetByTokenRow struct {
	UserID    int64        `json:"user_id"`
	Token     string       `json:"token"`
	ExpiresAt time.Time    `json:"expires_at"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) GetPasswordResetByToken(ctx context.Context, token string) (GetPasswordResetByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetByToken, token)
	var i GetPasswordResetByTokenRow
	err := row.Scan(
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
