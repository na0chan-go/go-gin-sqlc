// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createPasswordReset = `-- name: CreatePasswordReset :execresult
INSERT INTO password_resets (
    user_id, token, expires_at
) VALUES (
    ?, ?, ?
)
`

type CreatePasswordResetParams struct {
	UserID    int64     `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreatePasswordReset(ctx context.Context, arg CreatePasswordResetParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPasswordReset, arg.UserID, arg.Token, arg.ExpiresAt)
}

const deletePasswordReset = `-- name: DeletePasswordReset :exec
DELETE FROM password_resets
WHERE token = ?
`

func (q *Queries) DeletePasswordReset(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deletePasswordReset, token)
	return err
}

const getPasswordResetByToken = `-- name: GetPasswordResetByToken :one
SELECT user_id, token, expires_at, created_at
FROM password_resets
WHERE token = ? AND expires_at > NOW()
LIMIT 1
`

type GetPasswordResetByTokenRow struct {
	UserID    int64        `json:"user_id"`
	Token     string       `json:"token"`
	ExpiresAt time.Time    `json:"expires_at"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) GetPasswordResetByToken(ctx context.Context, token string) (GetPasswordResetByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetByToken, token)
	var i GetPasswordResetByTokenRow
	err := row.Scan(
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, email, password_hash, first_name, last_name, status, created_at, updated_at
FROM users
WHERE (
    email LIKE CONCAT('%', ?, '%') OR
    first_name LIKE CONCAT('%', ?, '%') OR
    last_name LIKE CONCAT('%', ?, '%')
)
AND (? IS NULL OR status = ?)
ORDER BY id
LIMIT ? OFFSET ?
`

type SearchUsersParams struct {
	CONCAT   interface{}     `json:"CONCAT"`
	CONCAT_2 interface{}     `json:"CONCAT_2"`
	CONCAT_3 interface{}     `json:"CONCAT_3"`
	Column4  interface{}     `json:"column_4"`
	Status   NullUsersStatus `json:"status"`
	Limit    int32           `json:"limit"`
	Offset   int32           `json:"offset"`
}

func (q *Queries) SearchUsers(ctx context.Context, arg SearchUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, searchUsers,
		arg.CONCAT,
		arg.CONCAT_2,
		arg.CONCAT_3,
		arg.Column4,
		arg.Status,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.FirstName,
			&i.LastName,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
